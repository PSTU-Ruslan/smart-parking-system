"""
Main application for Smart Parking System
"""

import cv2
import time
import threading
from car_detector import CarDetector
from parking_manager import ParkingManager
from web_dashboard import update_web_data
import config

def main():
    print("üöó Starting Smart Parking System...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    car_detector = CarDetector(confidence_threshold=config.DETECTION_CONFIDENCE)
    parking_manager = ParkingManager(config.PARKING_SPOTS)
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from web_dashboard import app
    web_thread = threading.Thread(target=lambda: app.run(
        host=config.WEB_HOST, 
        port=config.WEB_PORT, 
        debug=config.DEBUG_MODE, 
        use_reloader=False
    ))
    web_thread.daemon = True
    web_thread.start()
    print("üåê Web dashboard started on http://{}:{}".format(config.WEB_HOST, config.WEB_PORT))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
    if config.USE_WEBCAM:
        cap = cv2.VideoCapture(0)  # –í–µ–±-–∫–∞–º–µ—Ä–∞
    else:
        cap = cv2.VideoCapture(config.VIDEO_SOURCE)
    
    if not cap.isOpened():
        print("‚ùå Error: Could not open video source")
        return
    
    print("‚úÖ System initialized successfully")
    print("Press 'q' to quit")
    
    try:
        while True:
            # –ß—Ç–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
            ret, frame = cap.read()
            if not ret:
                print("‚ùå Error: Could not read frame")
                break
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            cars = car_detector.detect_cars(frame)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç
            parking_status = parking_manager.get_parking_status(cars)
            statistics = parking_manager.get_statistics()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            update_web_data(parking_status, statistics)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            frame_with_detections = car_detector.draw_detections(frame.copy(), cars)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cv2.imshow('Smart Parking System', frame_with_detections)
            
            # –í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é 'q'
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
            time.sleep(config.UPDATE_INTERVAL)
            
    except KeyboardInterrupt:
        print("\nüõë Shutting down...")
    
    finally:
        cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
